<?php

namespace App\Entity;

use App\Repository\VulnerabilityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: VulnerabilityRepository::class)]
class Vulnerability
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    #[ORM\ManyToMany(targetEntity: Monster::class, mappedBy: 'damageVulnerability')]
    private Collection $vulnerableMonsters;

    public function __construct()
    {
        $this->vulnerableMonsters = new ArrayCollection();
    }

    public function __toString(): string
    {
        return $this->name;
    }
    
    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): static
    {
        $this->name = $name;

        return $this;
    }

    /**
     * @return Collection<int, Monster>
     */
    public function getVulnerableMonsters(): Collection
    {
        return $this->vulnerableMonsters;
    }

    public function addVulnerableMonster(Monster $vulnerableMonster): static
    {
        if (!$this->vulnerableMonsters->contains($vulnerableMonster)) {
            $this->vulnerableMonsters->add($vulnerableMonster);
            $vulnerableMonster->addDamageVulnerability($this);
        }

        return $this;
    }

    public function removeVulnerableMonster(Monster $vulnerableMonster): static
    {
        if ($this->vulnerableMonsters->removeElement($vulnerableMonster)) {
            $vulnerableMonster->removeDamageVulnerability($this);
        }

        return $this;
    }
}
